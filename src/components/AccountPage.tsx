import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from 'axios';
import {
Â  RiUser3Line,
Â  RiSettings3Line,
Â  RiCustomerService2Line,
Â  RiStarLine,
Â  RiMore2Line,
} from "react-icons/ri";

import "./AccountPage.css";

interface AccountPageProps {
Â  user?: {
Â  Â  email?: string;
Â  Â  [key: string]: any;
Â  };
Â  setUser: React.Dispatch<React.SetStateAction<any>>;
Â  // âœ… App.tsx nundi onLoginClick prop vasthundi, so ikkada define cheyyali
Â  onLoginClick: () => void;
}

const AccountPage: React.FC<AccountPageProps> = ({ user, setUser, onLoginClick }) => {
Â  const [profileImage, setProfileImage] = useState<string | null>(null);
Â  const navigate = useNavigate();

Â  // ðŸ”„ Fetch user data from the backend on component mount
Â  useEffect(() => {
Â  Â  const fetchUser = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const token = localStorage.getItem('token');
Â  Â  Â  Â  if (!token) {
Â  Â  Â  Â  Â  onLoginClick(); // âœ… navigate('/login') ki badulu ee prop call cheyyali
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  const response = await axios.get('/api/user/me', {
Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  'Authorization': `Bearer ${token}`
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  Â  Â  
Â  Â  Â  Â  setUser(response.data.user);
Â  Â  Â  Â  if (response.data.user?.profileImage) {
Â  Â  Â  Â  Â  setProfileImage(response.data.user.profileImage);
Â  Â  Â  Â  }
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Failed to fetch user data:", error);
Â  Â  Â  Â  localStorage.removeItem('token');
Â  Â  Â  Â  onLoginClick(); // âœ… Error unna login ki pampali
Â  Â  Â  }
Â  Â  };

Â  Â  // user prop null ga unte matrame fetch cheyyali
Â  Â  if (!user) { 
Â  Â  Â  fetchUser();
Â  Â  }
Â  }, [navigate, user, setUser, onLoginClick]); // âœ… dependencies lo onLoginClick add cheyyadam better

Â  // ðŸ”„ Handle image upload to the backend
Â  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
Â  Â  const file = e.target.files?.[0];
Â  Â  if (!file || !user) return;

Â  Â  // Create a local preview
Â  Â  const imageUrl = URL.createObjectURL(file);
Â  Â  setProfileImage(imageUrl);

Â  Â  try {
Â  Â  Â  // ðŸš€ Create FormData to send the file to the server
Â  Â  Â  const formData = new FormData();
Â  Â  Â  formData.append('profileImage', file);
Â  Â  Â  
Â  Â  Â  const token = localStorage.getItem('token');
Â  Â  Â  
Â  Â  Â  // ðŸ’¡ Assuming you have a backend route to handle profile image uploads
Â  Â  Â  const response = await axios.post('/api/user/upload-image', formData, {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  'Content-Type': 'multipart/form-data',
Â  Â  Â  Â  Â  'Authorization': `Bearer ${token}`
Â  Â  Â  Â  }
Â  Â  Â  });

Â  Â  Â  // ðŸ”„ Update the state with the new image URL from the server
Â  Â  Â  const updatedUser = { ...user, profileImage: response.data.imageUrl };
Â  Â  Â  setUser(updatedUser);
Â  Â  Â  setProfileImage(response.data.imageUrl); // Update state with the final URL from Cloudinary
Â  Â  Â  alert('Profile image updated successfully!');
Â  Â  Â  
Â  Â  } catch (error) {
Â  Â  Â  console.error('Image upload failed:', error);
Â  Â  Â  alert('Failed to upload image.');
Â  Â  Â  // Revert to the original image on error
Â  Â  Â  if (user?.profileImage) {
Â  Â  Â  Â  Â  setProfileImage(user.profileImage);
Â  Â  Â  } else {
Â  Â  Â  Â  Â  setProfileImage(null);
Â  Â  Â  }
Â  Â  }
Â  };

Â  if (!user) {
Â  Â  return <div className="loading-container">Loading...</div>;
Â  }

Â  return (
Â  Â  <div className="profile-container">
Â  Â  Â  <div className="profile-header">
Â  Â  Â  Â  <div className="profile-info">
Â  Â  Â  Â  Â  <label htmlFor="upload-input">
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  className="profile-pic"
Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  backgroundImage: profileImage
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? `url(${profileImage})`
Â  Â  Â  Â  Â  Â  Â  Â  Â  : "url('https://via.placeholder.com/100')",
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  ></div>
Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  Â  id="upload-input"
Â  Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  Â  onChange={handleImageUpload}
Â  Â  Â  Â  Â  Â  style={{ display: "none" }}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <p style={{ marginTop: "10px", fontSize: "14px", color: "#555" }}>
Â  Â  Â  Â  Â  Â  {user.email || "No email available"}
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  Â </div>

Â  Â  Â  <div className="profile-options">
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  className="option-card"
Â  Â  Â  Â  Â  onClick={() => navigate("/edit-profile", { state: { user } })}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <RiUser3Line className="icon" />
Â  Â  Â  Â  Â  <span>Manage Account</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="option-card">
Â  Â  Â  Â  Â  <RiSettings3Line className="icon" />
Â  Â  Â  Â  Â  <span>Marketplace Settings</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="option-card">
Â  Â  Â  Â  Â  <RiCustomerService2Line className="icon" />
Â  Â  Â  Â  Â  <span>Support</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="option-card">
Â  Â  Â  Â  Â  <RiStarLine className="icon" />
Â  Â  Â  Â  Â  <span>Rate App</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="option-card">
Â  Â  Â  Â  Â  <RiMore2Line className="icon" />
Â  Â  Â  Â  Â  <span>Others</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â </div>

Â  Â  </div>
Â  );
};

export default AccountPage;